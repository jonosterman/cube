/**
 * Copyright (C) 2011 / cube-team <https://cube.forge.osor.eu>
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ch.admin.vbs.cube.common;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * This class is a stub. It SHOULD implement a way to uniquely identify the
 * client machine. Of course a certificate-based implementation would be much
 * better here. But since we do not have time to implement it yet, and that it
 * does not arm the security (only functionality), we just implement it with a
 * simple lazy generated file containing an uuid string.
 * 
 * @see Singleton Pattern
 */
public class MachineUuid {
	/** Logger */
	private static final Logger LOG = LoggerFactory.getLogger(MachineUuid.class);
	private static MachineUuid instance = new MachineUuid();
	private String uuid;

	/** @see Singleton Pattern */
	public static final MachineUuid getMachineUuid() {
		return instance;
	}

	/**
	 * Constructor.
	 */
	private MachineUuid() {
		try {
			// get filename from configuration file
			File uuidFile = new File(CubeCommonProperties.getProperty("machineUuid.file"));
			// check if file already exists
			if (uuidFile.exists()) {
				// load 'uuid' property from file
				Properties p = new Properties();
				FileInputStream in = new FileInputStream(uuidFile);
				p.loadFromXML(in);
				in.close();
				uuid = p.getProperty("uuid");
			} else {
				// generate 'uuid' and save it in file
				uuid = UuidGenerator.generate();
				Properties p = new Properties();
				p.setProperty("uuid", uuid);
				FileOutputStream out = new FileOutputStream(uuidFile);
				p.storeToXML(out, "generated by cube client");
				out.close();
			}
		} catch (Exception e) {
			LOG.error("Failed to init Machine UUID", e);
		}
	}

	/**
	 * @return UUID as string (passed in WebService calls).
	 */
	public String getUuidAsString() {
		return uuid;
	}
}

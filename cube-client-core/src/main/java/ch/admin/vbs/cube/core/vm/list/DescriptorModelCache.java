/**
 * Copyright (C) 2011 / cube-team <https://cube.forge.osor.eu>
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ch.admin.vbs.cube.core.vm.list;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.util.GregorianCalendar;
import java.util.HashSet;
import java.util.Properties;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ch.admin.vbs.cube.common.CubeClassification;
import ch.admin.vbs.cube.core.vm.IVmModelChangeListener;
import ch.admin.vbs.cube.core.vm.Vm;
import ch.admin.vbs.cube.core.vm.VmModel;
import ch.admin.vbs.cube.core.vm.list.VmDescriptor.LocalConfig;
import ch.admin.vbs.cube.core.vm.list.VmDescriptor.RemoteConfig;

public class DescriptorModelCache implements IVmModelChangeListener {
	/** Logger */
	private static final Logger LOG = LoggerFactory.getLogger(DescriptorModelCache.class);
	private final VmModel model;
	private File cacheFile;

	public DescriptorModelCache(VmModel model, File cacheFile) {
		this.model = model;
		this.cacheFile = cacheFile;
	}

	public void start() {
		// update model with file cache
		loadCache();
		// register for new changes
		model.addModelChangeListener(this);
	}

	// ==========================================
	// IVmModelChangeListener
	// ==========================================
	@Override
	public void listUpdated() {
		saveCache();
	}

	@Override
	public void vmUpdated(Vm vm) {
		saveCache();
	}

	private void saveCache() {
		try {
			LOG.debug("Save cache on disk.");
			Properties p = new Properties();
			int i = 0;
			for (Vm vm : model.getVmList()) {
				RemoteConfig rcfg = vm.getDescriptor().getRemoteCfg();
				LocalConfig lcfg = vm.getDescriptor().getLocalCfg();
				try {
					writeProp(i, "vm[%d].instanceUid", rcfg.getId(), p);
					p.put(String.format("vm[%d].classification", i), rcfg.getClassification().toString());
					writeProp(i, "vm[%d].vmContainerUid", lcfg.getVmContainerUid(), p);
					writeProp(i, "vm[%d].runtimeContainerUid", lcfg.getRuntimeContainerUid(), p);
					writeProp(i, "vm[%d].domain", rcfg.getDomain(), p);
					writeProp(i, "vm[%d].name", rcfg.getName(), p);
					writeProp(i, "vm[%d].type", rcfg.getType(), p);
					writeProp(i, "vm[%d].version", rcfg.getCfgVersion(), p);
					int pi = 0;
					for (String key : lcfg.getPropertyKeys()) {
						writeProp(i, "vm[%d].properties." + pi + ".key", URLEncoder.encode(key, "ASCII"), p);
						writeProp(i, "vm[%d].properties." + pi + ".value", URLEncoder.encode(lcfg.getProperty(key), "ASCII"), p);
						pi++;
					}
					i++;
				} catch (Exception e) {
					// append if some value is null (that means, server sent
					// invalid data)
					LOG.error("Failed to add desciptor to the local list.", e);
				}
			}
			GregorianCalendar now = new GregorianCalendar();
			FileWriter fw = new FileWriter(cacheFile);
			p.store(fw, String.format("Generated by Cube [%1$tY.%1$tm.%1$td %1$tH:%1$tM:%1$tS]", now));
			fw.close();
		} catch (Exception e) {
			LOG.error("Failed to save file", e);
		}
	}

	private void loadCache() {
		if (!cacheFile.exists()) {
			LOG.debug("Properties file not found [{}]", cacheFile.getAbsolutePath());
			return;
		}
		Properties p = new Properties();
		try {
			FileInputStream is = new FileInputStream(cacheFile);
			p.load(is);
			is.close();
			// build index
			HashSet<String> indexes = new HashSet<String>();
			Pattern mVm = Pattern.compile("vm\\[(\\d+)\\].+");
			for (Object k : p.keySet()) {
				Matcher m = mVm.matcher((String) k);
				if (m.matches()) {
					indexes.add(m.group(1));
				}
			}
			// load all vm in a list
			for (String index : indexes) {
				try {
					VmDescriptor desc = new VmDescriptor();
					RemoteConfig rcfg = desc.getRemoteCfg();
					LocalConfig lcfg = desc.getLocalCfg();
					rcfg.setId(readProp(index, "vm[%s].instanceUid", p));
					rcfg.setClassification(CubeClassification.valueOf(p.getProperty(String.format("vm[%s].classification", index))));
					lcfg.setVmContainerUid(readProp(index, "vm[%s].vmContainerUid", p));
					lcfg.setRuntimeContainerUid(readProp(index, "vm[%s].runtimeContainerUid", p));
					rcfg.setDomain(readProp(index, "vm[%s].domain", p));
					rcfg.setName(readProp(index, "vm[%s].name", p));
					rcfg.setType(readProp(index, "vm[%s].type", p));
					rcfg.setCfgVersion(readProp(index, "vm[%s].version", p));
					//
					HashSet<String> pindexes = new HashSet<String>();
					Pattern pVm = Pattern.compile("vm\\["+index+"\\]\\.properties\\.(\\d+)\\..+");
					for (Object k : p.keySet()) {
						Matcher m = pVm.matcher((String) k);
						if (m.matches()) {
							pindexes.add(m.group(1));
						}
					}
					for (String pi : pindexes) {
						String key = readProp(index, "vm[%s].properties." + pi + ".key", p);
						String value = readProp(index, "vm[%s].properties." + pi + ".value", p);
						key = URLDecoder.decode(key, "ASCII");
						value = URLDecoder.decode(value, "ASCII");
						lcfg.setProperty(key, value);
					}
					//
					Vm vm = model.findByInstanceUid(rcfg.getId());
					if (vm == null) {
						vm = new Vm(desc);
						model.addVm(vm);
					} else {
						LOG.error("Skip VM [{}]. already in model", vm.getId());
					}
				} catch (Exception e) {
					LOG.error("Failed to parse descriptor: vm[" + index + "]", e);
				}
			}
			LOG.debug("Cache loaded [{} descriptors]", indexes.size());
		} catch (Exception e) {
			LOG.error("Failed to load file", e);
		}
	}

	/** Write indexed properties. Handle null with a placehodler. */
	private void writeProp(int index, String keyTemplate, String value, Properties p) {
		if (value == null) {
			p.put(String.format(keyTemplate, index), "<null>");
		} else {
			p.put(String.format(keyTemplate, index), value);
		}
	}

	/** Read indexed properties. Handle null with a placehodler. */
	private String readProp(String index, String keyTemplate, Properties p) {
		String value = p.getProperty(String.format(keyTemplate, index));
		if (value == null || value.equals("<null>")) {
			return null;
		} else {
			return value;
		}
	}
}
